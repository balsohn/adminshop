<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script>
	//자바스크립트의 연산자, 주석처리방법은 자바랑 똑같다
	//한 문장이 끝나면 ;으로 끝을 알린다 
	//alert("dd");
	
	//제어문의 사용방법도 같다
	//자료형 : 자료형이 없다=> 변수에 어떤 형태의 자료형도 들어간다.
	
	//---------변수의 적용 범위 알아보기--------------//
	//변수의 적용 범위 : 스코프Scope. 변수의 유효영역 

	//변수를 만들때 키워드는 => 생략, var, let, const 
	
	
	//[1] 생략 => 변수에 값을 바로 할당해야 된다.. 메소드내에서 생략된 형태의 변수는 전역변수
	//전역변수와 지역변수
	//지역변수는 예약어 var와 함께 선언해야 하고 생략시 함수안에서 선언했어도 전역 변수로 취급된다.(반대로 전역변수로 사용하기 위해서 var생략)
	num=100;
	alert(num);
	//num2;
	
	var abc;
	
	abc=1234;
	abc="안녕하세요";
	alert(abc);
					
	abc=true;
	alert(abc);
	
	abc=44.234;
	alert(abc);
	

	
	//[2] var=> 초기부터 사용되는 변수 선언시 붙이는 키워드 => 변수 선언후 동일한 변수를 새로 선언해도 오류가 나지 않는다 
	//호이스팅(hoisting)끌어올리다. 상황에 따라 변수의 선언과 할당을 분리해서 선언 부분을 스코프의 가장 위쪽으로 끌어올림.
	//자바스크립트 해석기는 함수 소스를 훑어보면서 var변수를 따로 기억해둔다. 선언과 비슷한 효과. 
	//var변수는 호이스팅이 있기 때문에 변수를 선언하기 전에 사용해도 오류가 생기지 않고, 그로 인해 예상치 못한 결과가 나올 수 있음.
	//var변수는 재선언이 가능하다. 동일한 변수명을 사용하면 그 전에 변수명에 덮어쓰게 됨. 
	
	var kor=99;
	var kor=88;
	
	//[3] let=> 변수 선언시 붙이는 키워드 =>선언된 변수를 다시 선언하게 되면 오류를 발생
	//var과의 가장 큰 차이는 스코프의 범위. 
	//var는 함수 영역(레벨)의 스코프를 가지지만 let과 const는 블록 영역의 스코프. 
	
	//[3.1]블록안에서만 쓸 수 있는 변수
	//변수를 선언한 블록 {}로 묶은 부분에서만 사용 가능 
	//[3.2]만약 전역 변수를 선언하고 싶다면 let예약어를 쓰지 않고 변수 이름과 초깃값만 할당하면 된다.
	//[3.3]재할당은 가능하지만 재선언은 할 수 없는 변수 
	
	let eng=88;
	//let eng=88;
	
	
	//[4] const=> 변수 선언시 붙이는 키워드 => final(자바)
	const abc1=99;
	alert(abc1);
	//abc=88; const는 초기에 값을 준 뒤 값의 변경이 불가 
 	

</script>
</head>
<body><!-- jsStart.jsp -->


</body>
</html>