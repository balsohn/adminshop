/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2024-05-28 06:40:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class function2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");
      out.write("\t//body내의 요소의 동적인 변화\r\n");
      out.write("\t//글자관련 태그 속성 및 스타일 속성의 변경\r\n");
      out.write("\t//영역관련 태그 속성 및 스타일 속성 \r\n");
      out.write("\t//폼태그 관련 태그 속성 및 스타일 속성 \r\n");
      out.write("\t\r\n");
      out.write("\t//[1]태그속성 변경\r\n");
      out.write("\t//dom.속성=\"값\";\r\n");
      out.write("\t//[2]스타일속성 변경\r\n");
      out.write("\t//dom.style.속성=\"값\";\r\n");
      out.write("\t\r\n");
      out.write("\tfunction ex1()\r\n");
      out.write("\t{\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//자바스크립트에서 body내의 요소를 부르는 것을 DOM객체 \r\n");
      out.write("\t\t//태그명, id, class, name (form태그에서 많이쓰임)\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//document.getElementsByTagName\r\n");
      out.write("\t\t//document.getElementById\r\n");
      out.write("\t\t//document.getElementsByClassName\r\n");
      out.write("\t\t//document.getElementsByName\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//tag명이 div인 요소의 태그속성(align) 변경\r\n");
      out.write("\t\t//s가 붙은 getElements 는 모든 태그를 불러온다. 자동 배열로 처리. 0부터 \r\n");
      out.write("\t\tdocument.getElementsByTagName(\"div\")[1].align=\"right\";\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction ex2()\r\n");
      out.write("\t{\r\n");
      out.write("\t\t//input 태그의 속성을 변경\r\n");
      out.write("\t\tdocument.getElementsByTagName(\"input\")[3].type=\"password\";\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction ex3()\r\n");
      out.write("\t{\r\n");
      out.write("\t\t//img 태그의 속성을 변경\r\n");
      out.write("\t\tdocument.getElementsByTagName(\"img\")[0].src=\"moo6.jpg\";\r\n");
      out.write("\t\tdocument.getElementsByTagName(\"img\")[0].width=\"200\";\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body><!-- function2.jsp -->\r\n");
      out.write("\r\n");
      out.write("\t<input type=\"button\" onclick=\"ex1()\" value=\"div변경\">\r\n");
      out.write("\t<input type=\"button\" onclick=\"ex2()\" value=\"input변경\">\r\n");
      out.write("\t<input type=\"button\" onclick=\"ex3()\" value=\"img변경\">\r\n");
      out.write("\t\r\n");
      out.write("\t<div align=\"center\"> 무민밸리 </div>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<input type=\"text\">\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<img src=\"moo3.jpg\" width=\"100\">\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<div align=\"center\"> 스너프킨 </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
