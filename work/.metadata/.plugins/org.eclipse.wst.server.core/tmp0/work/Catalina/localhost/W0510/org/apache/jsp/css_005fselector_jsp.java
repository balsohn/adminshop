/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2024-05-10 07:26:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class css_005fselector_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("    /* style sheet에서 주석입니다.*/\r\n");
      out.write("    /* 선택자 : 현재 문서내의 태그의 속성을 추가하기위해서 부르는 이름 */\r\n");
      out.write("    /* 선택자 {속성:값1; 속성2:값2;} */\r\n");
      out.write("    /* 선택자는 몇가지가 있을까? => 수십가지가 있다. */\r\n");
      out.write("    /* 1.태그선택자  2.id선택자  3.class선택자 ... */\r\n");
      out.write("    \r\n");
      out.write("  \t/* 태그선택자 : <>없이 태그명만 표기 */ \r\n");
      out.write("  \tb {color:red;} /*현재문서내의 모든 b태그에 적용*/\r\n");
      out.write("  \ts {color:lightblue;}\r\n");
      out.write("  \tem {color:pink;}\r\n");
      out.write("  \tu {color:blue;}\r\n");
      out.write("  \ti {color:yellow;}\r\n");
      out.write("  \t... {}\r\n");
      out.write("  \t\r\n");
      out.write("  \t/* id선택자: id속성을 가진 태그에 접근 */\r\n");
      out.write("  \t\r\n");
      out.write("  \t/* id=# */\r\n");
      out.write("  \t#a1 {} \r\n");
      out.write("  \t#a1 {background:purple;}\r\n");
      out.write("  \t\r\n");
      out.write("  \t/* class선택자 : class 속성을 가진 태그에 접근 */\r\n");
      out.write("  \t/* class= .*/\r\n");
      out.write("  \t.b1 {background:grey;}\r\n");
      out.write("  \t \r\n");
      out.write("  \t/*id의 이름과 class의 이름이 같다면 */\r\n");
      out.write("  \t.a1 {background:yellow;}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body> <!-- css_selector.jsp -->\r\n");
      out.write("\r\n");
      out.write("\t<b> 오늘은 </b> <s> 즐거운 </s> <em id=\"a1\"> 금요일입니다. </em> <p>\r\n");
      out.write("\t<b id=\"a1\"> 내일은 </b> <s> 더 좋은 </s> <i> 토요일입니다. </i> <p>\r\n");
      out.write("\t<b> 모레는 </b> <s class=\"b1\"> 아쉬운 </s> <u class=\"a1\"> 일요일입니다.</u>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
