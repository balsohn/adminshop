/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.1
 * Generated at: 2024-05-27 06:57:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jsStart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");
      out.write("\t//자바스크립트의 연산자, 주석처리방법은 자바랑 똑같다\r\n");
      out.write("\t//한 문장이 끝나면 ;으로 끝을 알린다 \r\n");
      out.write("\t//alert(\"dd\");\r\n");
      out.write("\t\r\n");
      out.write("\t//제어문의 사용방법도 같다\r\n");
      out.write("\t//자료형 : 자료형이 없다=> 변수에 어떤 형태의 자료형도 들어간다.\r\n");
      out.write("\t\r\n");
      out.write("\tvar abc;\r\n");
      out.write("\t\r\n");
      out.write("\tabc=1234;\r\n");
      out.write("\tabc=\"안녕하세요\";\r\n");
      out.write("\talert(abc);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\tabc=true;\r\n");
      out.write("\talert(abc);\r\n");
      out.write("\t\r\n");
      out.write("\tabc=44.234;\r\n");
      out.write("\talert(abc);\r\n");
      out.write("\t\r\n");
      out.write("\t//변수를 만들때 키워드는 => 생략, var, let, const \r\n");
      out.write("\t\r\n");
      out.write("\t//[1] 생략 => 변수에 값을 바로 할당해야 된다.. 메소드내에서 생략된 형태의 변수는 전역변수\r\n");
      out.write("\tnum=100;\r\n");
      out.write("\talert(num);\r\n");
      out.write("\t//num2;\r\n");
      out.write("\t\r\n");
      out.write("\t//[2] var=> 초기부터 사용되는 변수 선언시 붙이는 키워드 => 변수 선언후 동일한 변수를 새로 선언해도 오류가 나지 않는다 \r\n");
      out.write("\tvar kor=99;\r\n");
      out.write("\tvar kor=88;\r\n");
      out.write("\t//[3] let=> 변수 선언시 붙이는 키워드 =>선언된 변수를 다시 선언하게 되면 오류를 발생\r\n");
      out.write("\tlet eng=88;\r\n");
      out.write("\t//let eng=88;\r\n");
      out.write("\t//[4] const=> 변수 선언시 붙이는 키워드 => final(자바)\r\n");
      out.write("\tconst abc1=99;\r\n");
      out.write("\talert(abc1);\r\n");
      out.write("\t//abc=88; const는 초기에 값을 준 뒤 값의 변경이 불가 \r\n");
      out.write(" \t\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body><!-- jsStart.jsp -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
